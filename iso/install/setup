#!/bin/sh

#Install the packaged kpm first using the kpm which was on the ISO (may be a simplified version later)
sh /mnt/iso/install/kpm set /mnt/iso/packages || { echo "kpm error, installation cancelled!"; exit 1; }
sh /mnt/iso/install/kpm install kpm || { echo "kpm error, installation cancelled!"; exit 1; }

KARLS=`cat /mnt/iso/karls_iso`
echo ""
echo "Welcome to $KARLS ISO Installation/Live System"

while true; do

echo ""
echo "Press Any Key to start Installation or \"S\" to drop to Live ISO Shell"
read -s -n 1
REP=`echo $REPLY | tr '[:upper:]' '[:lower:]'`
[[ "$REP" == "s" ]] && { echo "Type \"setup\" to start install again."; exit 0; }

echo ""
echo "                        * * * WARNING * * *"
echo ""
echo "Installing KarLS on a disk will DESTROY all other data on that disk!"
echo ""
echo "Possible installation target candidates:"
fdisk -l | grep Disk
echo ""
echo -n "Enter device to install: "
read
[[ ! -b "$REPLY" ]] && { echo "[$REPLY] not found or not a device!"; continue; }
TRGT="$REPLY"

echo ""
echo "Insallation target is [$TRGT]!"
fdisk -l $TRGT
echo ""
echo "             * * * LAST CHANCE! Do you really want to continue? * * *"
echo ""
echo "KarLS will be installed on [$TRGT], and all pre-existing data will be destroyed there!"
echo ""
echo -n "Type \"YES\" to continue installation: "
read
[[ "$REPLY" != "YES" ]] && { echo "Installation cancelled!"; continue; }

UEFI=0
[[ -d "/sys/firmware/efi" ]] && { echo "UEFI detected!"; UEFI=1; }

if [ "$UEFI" == "0" ]; then
echo "Partitioning disk for MBR..."
echo -e "o\nn\np\n1\n2048\n\na\n1\nw\n" | fdisk $TRGT > /dev/null || { echo "fdisk error, installation cancelled!"; break; }

echo "Formatting Linux partition..."
TRGTP1="$TRGT"1
[[ ! -b "$TRGTP1" ]] && { TRGTP1="$TRGT"p1; }
[[ ! -b "$TRGTP1" ]] && { echo "First partition not found on $TRGT?"; break; }

kpm install e2fsprogs || { echo "kpm error, installation cancelled!"; break; }
mkfs.ext4 $TRGTP1 > /dev/null || { echo "mkfs.ext4 error, installation cancelled!"; break; }

echo "Mounting target..."
mkdir -p /mnt/target
mount $TRGTP1 /mnt/target > /dev/null || { echo "mount error, installation cancelled!"; break; }

else
kpm install util_linux || { echo "kpm error, installation cancelled!"; break; }
echo "Partitioning disk for GPT..."
echo -e "g\nn\n1\n2048\n+64M\nt\n1\nn\n2\n\n\nw\n" | /usr/sbin/fdisk -W always $TRGT > /dev/null || { echo "fdisk error, installation cancelled!"; break; }

echo "Formatting partitions..."
TRGTP1="$TRGT"1
[[ ! -b "$TRGTP1" ]] && { TRGTP1="$TRGT"p1; }
[[ ! -b "$TRGTP1" ]] && { echo "First partition not found on $TRGT?"; break; }
TRGTP2="$TRGT"2
[[ ! -b "$TRGTP2" ]] && { TRGTP2="$TRGT"p2; }
[[ ! -b "$TRGTP2" ]] && { echo "Second partition not found on $TRGT?"; break; }

kpm install e2fsprogs || { echo "kpm error, installation cancelled!"; break; }
mkfs.vfat $TRGTP1 > /dev/null || { echo "mkfs.vfat error, installation cancelled!"; break; }
mkfs.ext4 $TRGTP2 > /dev/null || { echo "mkfs.ext4 error, installation cancelled!"; break; }

echo "Mounting target..."
mkdir -p /mnt/target
mount $TRGTP2 /mnt/target > /dev/null || { echo "mount error, installation cancelled!"; break; }
mkdir -p /mnt/target/boot/efi
mount -t vfat $TRGTP1 /mnt/target/boot/efi > /dev/null || { echo "mount error, installation cancelled!"; break; }
fi

echo "Installing Kernel files..."
mkdir -p /mnt/target/boot/grub /mnt/target/etc/kpm
cp /etc/kpm/repo /mnt/target/etc/kpm
kpm install kernel /mnt/target || { echo "kpm error, installation cancelled!"; break; }
cp -r /lib/firmware /mnt/target/lib 2> /dev/null
KVER=`cat /mnt/target/etc/kpm/pkg/kernel/VER`

echo -n "Installing GRUB boot loader"

MODE=0
NOFBCON=`grep "nofb nomodeset" /proc/cmdline`
SERIALCON=`grep console=ttyS0 /proc/cmdline`
if [ -n "$NOFBCON" ]; then
 echo -n " with No Framebuffer"
 MODE=1
fi
if [ -n "$SERIALCON" ]; then
 echo -n " over Serial Console"
 MODE=2
fi
echo "..."

if [ "$UEFI" == "0" ]; then
 BLK=`blkid $TRGTP1 | cut -d' ' -f2 | cut -d= -f2`
else
 BLK=`blkid $TRGTP2 | cut -d' ' -f2 | cut -d= -f2`
fi

if [ "$UEFI" == "0" ]; then
kpm install grub /mnt/target || { echo "kpm error, installation cancelled!"; break; }
/mnt/target/usr/sbin/grub-install --boot-directory=/mnt/target/boot --directory=/mnt/target/usr/lib/grub/i386-pc "$TRGT" || { echo "grub-install error, installation cancelled!"; break; }

else
kpm install grub_efi /mnt/target || { echo "kpm error, installation cancelled!"; break; }

cp /mnt/target/usr/share/grub/grub-early.cfg.templ /mnt/target/boot/grub/grub-early.cfg
sed -i 's/_BLK_ID_/'$BLK'/' /mnt/target/boot/grub/grub-early.cfg
mkdir -p /mnt/target/boot/efi/EFI/BOOT

/mnt/target/usr/bin/grub-mkimage -o /mnt/target/boot/efi/EFI/BOOT/BOOTX64.EFI -O x86_64-efi -c /mnt/target/boot/grub/grub-early.cfg -p /boot/grub --directory=/mnt/target/usr/lib/grub/x86_64-efi \
boot.mod cat.mod configfile.mod cpuid.mod disk.mod elf.mod exfat.mod ext2.mod fat.mod file.mod hdparm.mod help.mod iso9660.mod linux.mod loadenv.mod \
lsefi.mod ls.mod msdospart.mod normal.mod ntfs.mod part_gpt.mod part_msdos.mod reboot.mod scsi.mod search_fs_file.mod search.mod \
serial.mod terminal.mod terminfo.mod usb_keyboard.mod usbserial_common.mod usbserial_pl2303.mod || { echo "grub-mkimage error, installation cancelled!"; break; }
fi

cp /mnt/target/usr/share/grub/grub.cfg.templ /mnt/target/boot/grub/grub.cfg
sed -i 's/_BLK_ID_/'$BLK'/' /mnt/target/boot/grub/grub.cfg
sed -i 's/_KERNEL_VER_/'$KVER'/' /mnt/target/boot/grub/grub.cfg

if [ "$MODE" == "0" ]; then
sed -i 's/_KARLS_BOOT_TITLE_//' /mnt/target/boot/grub/grub.cfg
sed -i 's/_PARAMETERS_//' /mnt/target/boot/grub/grub.cfg
fi
if [ "$MODE" == "1" ]; then
sed -i 's/_KARLS_BOOT_TITLE_/ No Framebuffer/' /mnt/target/boot/grub/grub.cfg
sed -i 's/_PARAMETERS_/ nofb nomodeset/' /mnt/target/boot/grub/grub.cfg
fi
if [ "$MODE" == "2" ]; then
sed -i 's/_KARLS_BOOT_TITLE_/ Serial Console/' /mnt/target/boot/grub/grub.cfg
sed -i 's/_PARAMETERS_/ console=ttyS0,9600/' /mnt/target/boot/grub/grub.cfg
fi

echo "Installing base OS packages..."

kpm install karls_base /mnt/target || { echo "kpm error, installation cancelled!"; break; }

if [ -z "$SERIALCON" ]; then
 rm /mnt/target/etc/inittab-serial
else
 mv /mnt/target/etc/inittab-serial /mnt/target/etc/inittab
fi

if [ "$UEFI" == "1" ]; then
echo "$TRGTP1		/boot/efi	vfat	ro,defaults,nosuid,nodev,noexec 0 0" >> /mnt/target/etc/fstab
fi

IFWIFI=`lsmod | grep -e "wifi\|wlan\|cfg80211"`
if [ "$IFWIFI" != "" ]; then
 echo "-> Wifi device found, installing supporting packages."
 kpm install wpa_supplicant /mnt/target
fi

DEVS=`ifconfig -a | grep "Link encap" | cut -f1 -d' ' | grep -v lo`
for dev in $DEVS; do
 echo "Network interface $dev found, setting to dhcp. Change /etc/network/$dev for fixed IP."
 echo "DHCP=YES" > /mnt/target/etc/network/$dev
 echo "IP=1.1.1.1" >> /mnt/target/etc/network/$dev
 echo "NETMASK=255.255.255.255" >> /mnt/target/etc/network/$dev
 if [ "$dev" == "wlan0" ]; then
  echo "-> Network interface $dev set to Wifi, trying to setup"
  echo "WIFI=YES" >> /mnt/target/etc/network/$dev
  kpm install iw
  echo "-> Run /usr/bin/wifi-scan to scan visible Wifi SSIDs easily."
  echo "Currently visible SSIDs:"
  echo "--------------------------------"
  /usr/bin/wifi-scan
  echo "--------------------------------"
  echo -n "Enter SSID for wlan0 to conect (empty response to skip): "
  read
  SSID=$REPLY
  if [ "$SSID" != "" ]; then
   echo -n "Enter WPA password for $SSID: "
   read
   PSK=$REPLY
   cp /mnt/target/etc/wpa_supplicant/wpa_supplicant-template.conf /mnt/target/etc/wpa_supplicant/wpa_supplicant-wlan0.conf
   sed -i "s/^ssid=\"\"/ssid=\"$SSID\"/" /mnt/target/etc/wpa_supplicant/wpa_supplicant-wlan0.conf
   sed -i "s/^psk=\"\"/psk=\"$PSK\"/" /mnt/target/etc/wpa_supplicant/wpa_supplicant-wlan0.conf
   echo "-> wlan0 configuration complete, edit /etc/wpa_supplicant/wpa_supplicant-wlan0.conf to modify"
  else
   echo "-> wlan0 configuration skipped, edit /etc/wpa_supplicant/wpa_supplicant-wlan0.conf to setup device"
  fi
 fi
done

echo "Installing optional packages..."
kpm install tmux /mnt/target

echo ""
echo "KarLS Installation finished!"
echo "WARNING! root has no password set. You know what that means."
break

done

echo ""
echo "Press Any Key to Reboot or \"S\" to drop to Live ISO Shell (E.g. to install further packages with kpm to /mnt/target)"
read -s -n 1
REP=`echo $REPLY | tr '[:upper:]' '[:lower:]'`
[[ "$REP" == "s" ]] && { echo "Type \"setup\" to start install again."; exit 0; }

#Force reboot
sync
[[ "$UEFI" == "1" ]] && umount -r /mnt/target/boot/efi
umount -r /mnt/target
echo 1 > /proc/sys/kernel/sysrq
echo b > /proc/sysrq-trigger
